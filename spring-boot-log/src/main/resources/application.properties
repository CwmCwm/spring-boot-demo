# spring.application.name 配置ApplicationContext的名字，见org.springframework.context.ApplicationContext.getApplicationName()
# 应用场景：spring-cloud中默认用此作为服务名称
spring.application.name=spring-boot-log

# Server HTTP port/http服务的端口，默认8080
server.port=8080



# logging.level 配置日志级别，下面几个示例知道  logging.level后面添加你你要路径的日志输出级别，你实验一下，看控制台输出验证
# root根路径的日志输出级别
logging.level.root=INFO
# com.demo.log.controller路径的日志输出级别
logging.level.com.demo.log.controller=TRACE
# com.demo.log.service路径的日志输出级别
logging.level.com.demo.log.service=DEBUG

# logging.file.name 配置日志输出的文件，实验一下就知道输出什么
logging.file.name=E:/tmp/spring-boot-log.log
# 这里实验一下，当日志超过1MB时，旧的spring-boot-log.log文件重命名为 spring-boot-log.log.2020-01-06.0  并压缩成spring-boot-log.log.2020-01-06.0.gz
# 这个命名规则够用啦
# logging.file.max-size 设置日志文件的最大尺寸
logging.file.max-size=1MB
# logging.file.max-history 设置存档日志文件的最大容量，就是有100个 .gz 就开始删除 .gz压缩文件
logging.file.max-history=100
# 以上spring-boot的默认的日志功能够用啦，如果想日志存入数据库，日志推送到统一的日志中心等等，那你就要自己扩展咯
# 通过AOP实现 或者 appender实现
